/*
 * generated by Xtext 2.32.0
 */
package org.example.restdsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.example.restdsl.ide.contentassist.antlr.internal.InternalRestDslParser;
import org.example.restdsl.services.RestDslGrammarAccess;

public class RestDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(RestDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, RestDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getRestDslAccess().getAlternatives(), "rule__RestDsl__Alternatives");
			builder.put(grammarAccess.getOperationAccess().getAlternatives_0(), "rule__Operation__Alternatives_0");
			builder.put(grammarAccess.getOperationAccess().getMethodAlternatives_3_0(), "rule__Operation__MethodAlternatives_3_0");
			builder.put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
			builder.put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
			builder.put(grammarAccess.getRestApiAccess().getGroup(), "rule__RestApi__Group__0");
			builder.put(grammarAccess.getOperationAccess().getGroup(), "rule__Operation__Group__0");
			builder.put(grammarAccess.getOperationAccess().getGroup_4(), "rule__Operation__Group_4__0");
			builder.put(grammarAccess.getOperationAccess().getGroup_5(), "rule__Operation__Group_5__0");
			builder.put(grammarAccess.getOperationAccess().getGroup_6(), "rule__Operation__Group_6__0");
			builder.put(grammarAccess.getOperationAccess().getGroup_7(), "rule__Operation__Group_7__0");
			builder.put(grammarAccess.getLogicAccess().getGroup(), "rule__Logic__Group__0");
			builder.put(grammarAccess.getRestDslAccess().getEntitiesAssignment_0(), "rule__RestDsl__EntitiesAssignment_0");
			builder.put(grammarAccess.getRestDslAccess().getRestApisAssignment_1(), "rule__RestDsl__RestApisAssignment_1");
			builder.put(grammarAccess.getEntityAccess().getNameAssignment_1(), "rule__Entity__NameAssignment_1");
			builder.put(grammarAccess.getEntityAccess().getFieldsAssignment_3(), "rule__Entity__FieldsAssignment_3");
			builder.put(grammarAccess.getFieldAccess().getNameAssignment_0(), "rule__Field__NameAssignment_0");
			builder.put(grammarAccess.getFieldAccess().getTypeAssignment_2(), "rule__Field__TypeAssignment_2");
			builder.put(grammarAccess.getRestApiAccess().getNameAssignment_1(), "rule__RestApi__NameAssignment_1");
			builder.put(grammarAccess.getRestApiAccess().getPathAssignment_4(), "rule__RestApi__PathAssignment_4");
			builder.put(grammarAccess.getRestApiAccess().getOperationsAssignment_5(), "rule__RestApi__OperationsAssignment_5");
			builder.put(grammarAccess.getOperationAccess().getNameAssignment_1(), "rule__Operation__NameAssignment_1");
			builder.put(grammarAccess.getOperationAccess().getMethodAssignment_3(), "rule__Operation__MethodAssignment_3");
			builder.put(grammarAccess.getOperationAccess().getPathAssignment_4_1(), "rule__Operation__PathAssignment_4_1");
			builder.put(grammarAccess.getOperationAccess().getRequestAssignment_5_1(), "rule__Operation__RequestAssignment_5_1");
			builder.put(grammarAccess.getOperationAccess().getResponseAssignment_6_1(), "rule__Operation__ResponseAssignment_6_1");
			builder.put(grammarAccess.getOperationAccess().getLogicAssignment_7_1(), "rule__Operation__LogicAssignment_7_1");
			builder.put(grammarAccess.getTypeAccess().getTypeAssignment(), "rule__Type__TypeAssignment");
			builder.put(grammarAccess.getLogicAccess().getImplementationAssignment_1(), "rule__Logic__ImplementationAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private RestDslGrammarAccess grammarAccess;

	@Override
	protected InternalRestDslParser createParser() {
		InternalRestDslParser result = new InternalRestDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RestDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RestDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
