/*
 * generated by Xtext 2.32.0
 */
grammar InternalRestDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.example.restdsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.example.restdsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.example.restdsl.services.RestDslGrammarAccess;

}

@parser::members {

 	private RestDslGrammarAccess grammarAccess;

    public InternalRestDslParser(TokenStream input, RestDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "RestDsl";
   	}

   	@Override
   	protected RestDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRestDsl
entryRuleRestDsl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRestDslRule()); }
	iv_ruleRestDsl=ruleRestDsl
	{ $current=$iv_ruleRestDsl.current; }
	EOF;

// Rule RestDsl
ruleRestDsl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRestDslAccess().getEntitiesEntityParserRuleCall_0_0());
				}
				lv_entities_0_0=ruleEntity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRestDslRule());
					}
					add(
						$current,
						"entities",
						lv_entities_0_0,
						"org.example.restdsl.RestDsl.Entity");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getRestDslAccess().getRestApisRestApiParserRuleCall_1_0());
				}
				lv_restApis_1_0=ruleRestApi
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRestDslRule());
					}
					add(
						$current,
						"restApis",
						lv_restApis_1_0,
						"org.example.restdsl.RestDsl.RestApi");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)*
;

// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	iv_ruleEntity=ruleEntity
	{ $current=$iv_ruleEntity.current; }
	EOF;

// Rule Entity
ruleEntity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='entity'
		{
			newLeafNode(otherlv_0, grammarAccess.getEntityAccess().getEntityKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEntityRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getEntityAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEntityAccess().getFieldsFieldParserRuleCall_3_0());
				}
				lv_fields_3_0=ruleField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntityRule());
					}
					add(
						$current,
						"fields",
						lv_fields_3_0,
						"org.example.restdsl.RestDsl.Field");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getEntityAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleField
entryRuleField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	iv_ruleField=ruleField
	{ $current=$iv_ruleField.current; }
	EOF;

// Rule Field
ruleField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getFieldAccess().getColonKeyword_1());
		}
		(
			(
				lv_type_2_0=RULE_ID
				{
					newLeafNode(lv_type_2_0, grammarAccess.getFieldAccess().getTypeIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFieldRule());
					}
					setWithLastConsumed(
						$current,
						"type",
						lv_type_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleRestApi
entryRuleRestApi returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRestApiRule()); }
	iv_ruleRestApi=ruleRestApi
	{ $current=$iv_ruleRestApi.current; }
	EOF;

// Rule RestApi
ruleRestApi returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='restApi'
		{
			newLeafNode(otherlv_0, grammarAccess.getRestApiAccess().getRestApiKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRestApiAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRestApiRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getRestApiAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='path'
		{
			newLeafNode(otherlv_3, grammarAccess.getRestApiAccess().getPathKeyword_3());
		}
		(
			(
				lv_path_4_0=RULE_STRING
				{
					newLeafNode(lv_path_4_0, grammarAccess.getRestApiAccess().getPathSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRestApiRule());
					}
					setWithLastConsumed(
						$current,
						"path",
						lv_path_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRestApiAccess().getOperationsOperationParserRuleCall_5_0());
				}
				lv_operations_5_0=ruleOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRestApiRule());
					}
					add(
						$current,
						"operations",
						lv_operations_5_0,
						"org.example.restdsl.RestDsl.Operation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getRestApiAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	iv_ruleOperation=ruleOperation
	{ $current=$iv_ruleOperation.current; }
	EOF;

// Rule Operation
ruleOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='create'
			{
				newLeafNode(otherlv_0, grammarAccess.getOperationAccess().getCreateKeyword_0_0());
			}
			    |
			otherlv_1='read'
			{
				newLeafNode(otherlv_1, grammarAccess.getOperationAccess().getReadKeyword_0_1());
			}
			    |
			otherlv_2='update'
			{
				newLeafNode(otherlv_2, grammarAccess.getOperationAccess().getUpdateKeyword_0_2());
			}
			    |
			otherlv_3='delete'
			{
				newLeafNode(otherlv_3, grammarAccess.getOperationAccess().getDeleteKeyword_0_3());
			}
			    |
			otherlv_4='customEndpoint'
			{
				newLeafNode(otherlv_4, grammarAccess.getOperationAccess().getCustomEndpointKeyword_0_4());
			}
		)
		(
			(
				lv_name_5_0=RULE_ID
				{
					newLeafNode(lv_name_5_0, grammarAccess.getOperationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_5_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_6=':'
		{
			newLeafNode(otherlv_6, grammarAccess.getOperationAccess().getColonKeyword_2());
		}
		(
			(
				(
					lv_method_7_1='GET'
					{
						newLeafNode(lv_method_7_1, grammarAccess.getOperationAccess().getMethodGETKeyword_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOperationRule());
						}
						setWithLastConsumed($current, "method", lv_method_7_1, null);
					}
					    |
					lv_method_7_2='POST'
					{
						newLeafNode(lv_method_7_2, grammarAccess.getOperationAccess().getMethodPOSTKeyword_3_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOperationRule());
						}
						setWithLastConsumed($current, "method", lv_method_7_2, null);
					}
					    |
					lv_method_7_3='PUT'
					{
						newLeafNode(lv_method_7_3, grammarAccess.getOperationAccess().getMethodPUTKeyword_3_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOperationRule());
						}
						setWithLastConsumed($current, "method", lv_method_7_3, null);
					}
					    |
					lv_method_7_4='DELETE'
					{
						newLeafNode(lv_method_7_4, grammarAccess.getOperationAccess().getMethodDELETEKeyword_3_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOperationRule());
						}
						setWithLastConsumed($current, "method", lv_method_7_4, null);
					}
				)
			)
		)?
		(
			otherlv_8='path'
			{
				newLeafNode(otherlv_8, grammarAccess.getOperationAccess().getPathKeyword_4_0());
			}
			(
				(
					lv_path_9_0=RULE_STRING
					{
						newLeafNode(lv_path_9_0, grammarAccess.getOperationAccess().getPathSTRINGTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOperationRule());
						}
						setWithLastConsumed(
							$current,
							"path",
							lv_path_9_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
		(
			otherlv_10='request'
			{
				newLeafNode(otherlv_10, grammarAccess.getOperationAccess().getRequestKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOperationAccess().getRequestTypeParserRuleCall_5_1_0());
					}
					lv_request_11_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperationRule());
						}
						set(
							$current,
							"request",
							lv_request_11_0,
							"org.example.restdsl.RestDsl.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_12='response'
			{
				newLeafNode(otherlv_12, grammarAccess.getOperationAccess().getResponseKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOperationAccess().getResponseTypeParserRuleCall_6_1_0());
					}
					lv_response_13_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperationRule());
						}
						set(
							$current,
							"response",
							lv_response_13_0,
							"org.example.restdsl.RestDsl.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_14='logic'
			{
				newLeafNode(otherlv_14, grammarAccess.getOperationAccess().getLogicKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOperationAccess().getLogicLogicParserRuleCall_7_1_0());
					}
					lv_logic_15_0=ruleLogic
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperationRule());
						}
						set(
							$current,
							"logic",
							lv_logic_15_0,
							"org.example.restdsl.RestDsl.Logic");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_type_0_0=RULE_ID
			{
				newLeafNode(lv_type_0_0, grammarAccess.getTypeAccess().getTypeIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getTypeRule());
				}
				setWithLastConsumed(
					$current,
					"type",
					lv_type_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleLogic
entryRuleLogic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicRule()); }
	iv_ruleLogic=ruleLogic
	{ $current=$iv_ruleLogic.current; }
	EOF;

// Rule Logic
ruleLogic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getLogicAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				lv_implementation_1_0=RULE_STRING
				{
					newLeafNode(lv_implementation_1_0, grammarAccess.getLogicAccess().getImplementationSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLogicRule());
					}
					setWithLastConsumed(
						$current,
						"implementation",
						lv_implementation_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='}'
		{
			newLeafNode(otherlv_2, grammarAccess.getLogicAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
