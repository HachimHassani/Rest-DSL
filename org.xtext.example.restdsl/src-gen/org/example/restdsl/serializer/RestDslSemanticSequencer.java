/*
 * generated by Xtext 2.32.0
 */
package org.example.restdsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.example.restdsl.restDsl.Entity;
import org.example.restdsl.restDsl.Field;
import org.example.restdsl.restDsl.Logic;
import org.example.restdsl.restDsl.Operation;
import org.example.restdsl.restDsl.RestApi;
import org.example.restdsl.restDsl.RestDsl;
import org.example.restdsl.restDsl.RestDslPackage;
import org.example.restdsl.restDsl.Type;
import org.example.restdsl.services.RestDslGrammarAccess;

@SuppressWarnings("all")
public class RestDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RestDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RestDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RestDslPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case RestDslPackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case RestDslPackage.LOGIC:
				sequence_Logic(context, (Logic) semanticObject); 
				return; 
			case RestDslPackage.OPERATION:
				sequence_Operation(context, (Operation) semanticObject); 
				return; 
			case RestDslPackage.REST_API:
				sequence_RestApi(context, (RestApi) semanticObject); 
				return; 
			case RestDslPackage.REST_DSL:
				sequence_RestDsl(context, (RestDsl) semanticObject); 
				return; 
			case RestDslPackage.TYPE:
				sequence_Type(context, (Type) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (name=ID fields+=Field*)
	 * </pre>
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Field returns Field
	 *
	 * Constraint:
	 *     (name=ID type=ID)
	 * </pre>
	 */
	protected void sequence_Field(ISerializationContext context, Field semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RestDslPackage.Literals.FIELD__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestDslPackage.Literals.FIELD__NAME));
			if (transientValues.isValueTransient(semanticObject, RestDslPackage.Literals.FIELD__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestDslPackage.Literals.FIELD__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFieldAccess().getTypeIDTerminalRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Logic returns Logic
	 *
	 * Constraint:
	 *     implementation=STRING
	 * </pre>
	 */
	protected void sequence_Logic(ISerializationContext context, Logic semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RestDslPackage.Literals.LOGIC__IMPLEMENTATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestDslPackage.Literals.LOGIC__IMPLEMENTATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLogicAccess().getImplementationSTRINGTerminalRuleCall_1_0(), semanticObject.getImplementation());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operation returns Operation
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (method='GET' | method='POST' | method='PUT' | method='DELETE')? 
	 *         path=STRING? 
	 *         request=Type? 
	 *         response=Type? 
	 *         logic=Logic?
	 *     )
	 * </pre>
	 */
	protected void sequence_Operation(ISerializationContext context, Operation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RestApi returns RestApi
	 *
	 * Constraint:
	 *     (name=ID path=STRING operations+=Operation*)
	 * </pre>
	 */
	protected void sequence_RestApi(ISerializationContext context, RestApi semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RestDsl returns RestDsl
	 *
	 * Constraint:
	 *     (entities+=Entity | restApis+=RestApi)+
	 * </pre>
	 */
	protected void sequence_RestDsl(ISerializationContext context, RestDsl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns Type
	 *
	 * Constraint:
	 *     type=ID
	 * </pre>
	 */
	protected void sequence_Type(ISerializationContext context, Type semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RestDslPackage.Literals.TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestDslPackage.Literals.TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeAccess().getTypeIDTerminalRuleCall_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
}
