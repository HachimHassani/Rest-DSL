/*
 * generated by Xtext 2.32.0
 */
package org.example.restdsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
// Import necessary classes
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.example.restdsl.restDsl.Entity
import org.example.restdsl.restDsl.RestApi

// Your generator class
class RestDslGenerator extends AbstractGenerator {

    // Generate method for RestDsl model
    override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
        for (element : resource.allContents.toIterable) {
            // Check if the element is an Entity or RestApi
            if (element instanceof Entity) {
                generateEntity(element as Entity, fsa)
            } else if (element instanceof RestApi) {
                generateRestApi(element as RestApi, fsa)
            }
        }
    }

    // Method to generate code for Entity
    def generateEntity(Entity entity, IFileSystemAccess2 fsa) {
        fsa.generateFile('models/'+entity.name + '.java', '''
            // Generate code for Entity
            // You can implement the logic to generate Spring Boot code here
            // Use entity.name, entity.fields, etc.
            // Example:
            package generated;

            public class «entity.name» {
                // Fields
                «FOR field : entity.fields»
                    private «field.type» «field.name»;
                «ENDFOR»

                // Getters and setters
                «FOR field : entity.fields»
                    public «field.type» get«field.name.toFirstUpper»() {
                        return «field.name»;
                    }

                    public void set«field.name.toFirstUpper»(«field.type» «field.name») {
                        this.«field.name» = «field.name»;
                    }
                «ENDFOR»
            }
        ''')
    }

    // Method to generate code for RestApi
    def generateRestApi(RestApi restApi, IFileSystemAccess2 fsa) {
        fsa.generateFile('controllers/'+restApi.name + 'Controller.java', '''
            // Generate code for RestApi Controller
            // You can implement the logic to generate Spring Boot code here
            // Use restApi.name, restApi.path, restApi.operations, etc.
            // Example:
            package generated;

            import org.springframework.web.bind.annotation.*;

            @RestController
            @RequestMapping("«restApi.path»")
            public class «restApi.name.toFirstUpper»Controller {
                «FOR operation : restApi.operations»
                    @RequestMapping(value = "«operation.path»", method = RequestMethod.«operation.method.toUpperCase »)
                    public «operation.response.type» «operation.name»(«IF operation.request != null»@RequestBody «operation.request.type» request«ENDIF») {
                        // Implementation for the operation logic
                        «IF operation.logic != null»
                            «operation.logic.implementation»
                        «ENDIF»
                    }
                «ENDFOR»
            }
        ''')
    }
}
